<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- The modelVersion is the version of the POM format and must be always 4.0.0 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- the id of the project's group -->
    <groupId>group18</groupId>
    <!-- the id of the artifact (project) -->
    <artifactId>mm</artifactId>
    <!-- the version of the artifact under the specified group -->
    <version>0.1-SNAPSHOT</version>

    <properties>
        <!-- Set file encoding for all source files. This avoids warnings about Maven copying files without knowing their encoding. -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <javafx.version>21.0.3</javafx.version>
    </properties>

    <dependencies>
        <!-- JUnit 5 - Unified dependency -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <!-- JavaFX 17 (compatible with Apple Silicon) -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- java.fx fxml -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- java.fx media for audio support -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-media</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- jbox2d (Box2D Java Port) - see https://mvnrepository.com/artifact/org.jbox2d/jbox2d-library -->
        <dependency>
            <groupId>org.jbox2d</groupId>
            <artifactId>jbox2d-library</artifactId>
            <version>2.2.1.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>
        <!-- TestFX fÃ¼r JavaFX-Tests -->
        <dependency>
            <groupId>org.testfx</groupId>
            <artifactId>testfx-core</artifactId>
            <version>4.0.16-alpha</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testfx</groupId>
            <artifactId>testfx-junit5</artifactId>
            <version>4.0.16-alpha</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.erosb</groupId>
            <artifactId>everit-json-schema</artifactId>
            <version>1.14.4</version>
        </dependency>
        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>20240303</version>
        </dependency>
        <dependency>
            <groupId>com.github.erosb</groupId>
            <artifactId>everit-json-schema-jdk6</artifactId>
            <version>1.9.2</version>
        </dependency>
        <dependency>
            <groupId>com.networknt</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>1.3.3</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.17.0</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.16.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.17.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!-- The Compiler plugin is used to compile the sources of your project. -->
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <!-- We are using Java 11 which is the current LTS release -->
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            <plugin>
                <!-- The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. It generates XML reports in target/surefire-reports -->
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
            <plugin>
                <!-- The Failsafe plugin is designed to run integration tests while the Surefire Plugin is designed to run unit tests -->
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
            <plugin>
                <!-- The Site plugin generates a site for the project which includes the project's reports configured below -->
                <artifactId>maven-site-plugin</artifactId>
                <version>3.9.1</version>
            </plugin>
            <plugin>
                <!-- The Maven Project Info Reports plugin reports information about the project for the site -->
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.1.1</version>
            </plugin>
            <plugin>
                <!-- The JaCoCo plugin runs JaCoCo to compute coverage of the test cases -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.6</version>
                <executions>
                    <execution>
                        <goals>
                            <!-- Prepares a property pointing to the JaCoCo runtime agent that can be passed as a VM argument to the application under test -->
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Maven plugin to run JavaFX 11+ applications -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <executable>${JAVA_HOME}/bin/java</executable>
                    <mainClass>mm.Main</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <!-- Automated JavaDoc with "mvn javadoc:javadoc" -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.4.1</version>
                <configuration>
                    <reportOutputDirectory>${project.basedir}/docs/javadoc</reportOutputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>javadoc</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <!-- The JXR Plugin produces a cross-reference of the project's sources, which is handy when used with the PMD Plugin for referencing errors found in the code. -->
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <plugin>
                <!-- The Surefire Report Plugin parses the generated XML files under target/surefire-reports and renders them using DOXIA, which creates the web interface version of the test results. -->
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
            <plugin>
                <!-- The PMD plugin runs the PMD code analysis tool on your project's source code and generate a site report with its results. It also supports the separate Copy/Paste Detector tool (or CPD) distributed with PMD. -->
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.14.0</version>
                <configuration>
                    <!-- Run PMD and CPD on the tests, too -->
                    <includeTests>true</includeTests>
                    <rulesets>
                        <!-- We are using a custom PMD rule set -->
                        <ruleset>https://projects.isp.uni-luebeck.de/isp/pmd/-/raw/master/rules.xml</ruleset>
                    </rulesets>
                </configuration>
            </plugin>
            <plugin>
                <!-- The Javadoc plugin uses the Javadoc tool to generate javadocs for the project -->
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <!-- Ignore module definition to avoid module related issues -->
                    <sourceFileExcludes>module-info.java</sourceFileExcludes>
                    <additionalOptions>
                      <option>--show-module-contents all</option>
                      <option>--show-packages all</option>
                    </additionalOptions>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>javadoc</report>
                            <report>test-javadoc</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <!-- The JaCoCo plugin runs JaCoCo to compute coverage of the test cases -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <!-- Disable the JaCoCo Aggregate report by explicitly selecting only the simple report -->
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <excludes>
                        <!-- Ignore GUI classes for coverage -->
                        <exclude>mm/gui/**/*</exclude>
                        <exclude>mm/Main.class</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
